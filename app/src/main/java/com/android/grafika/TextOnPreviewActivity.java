package com.android.grafika;

import android.app.Activity;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.opengl.GLES11Ext;
import android.opengl.GLES20;
import android.opengl.Matrix;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import com.android.grafika.camera.InputCamera;
import com.android.grafika.gles.Drawable2d;
import com.android.grafika.gles.EglCore;
import com.android.grafika.gles.LutProgram;
import com.android.grafika.gles.Sprite3d;
import com.android.grafika.gles.WindowSurface;

import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.Random;

/**
 * Demonstrates capturing video into a ring buffer.  When the "capture" button is clicked,
 * the buffered video is saved.
 * <p>
 * Capturing and storing raw frames would be slow and require lots of memory.  Instead, we
 * feed the frames into the video encoder and buffer the output.
 * <p>
 * Whenever we receive a new frame from the camera, our SurfaceTexture callback gets
 * notified.  That can happen on an arbitrary thread, so we use it to send a message
 * through our Handler.  That causes us to render the new frame to the display and to
 * our video encoder.
 */
public class TextOnPreviewActivity extends Activity implements
        SurfaceHolder.Callback,
        SurfaceTexture.OnFrameAvailableListener {
    private static final String TAG = MainActivity.TAG;
    private final float[] mTexMatrix = new float[16];
    Random random = new Random();
    private InputCamera inputCamera;
    private float[] mDisplayProjectionMatrix = new float[16];
    private EglCore mEglCore;
    private WindowSurface mDisplaySurface;
    private SurfaceTexture mCameraTexture;  // receives the output from the camera preview
    private Sprite3d mVideoSprite;
    private LutProgram mLutProgram;
    private Camera mCamera;
    private MainHandler mHandler;
    private SurfaceView displaySurfaceView;
    private int lutTextureId;

    private float[] inferno = {0.372810f, 0.118830f, 3.535830f,
            0.578085f, 0.323850f, 4.735350f,
            0.841245f, 0.573495f, 6.180945f,
            1.159485f, 0.864960f, 7.881795f,
            1.531530f, 1.196460f, 9.832290f,
            1.957380f, 1.564680f, 11.943180f,
            2.438055f, 1.966815f, 14.061465f,
            2.974065f, 2.401335f, 16.182300f,
            3.568725f, 2.862375f, 18.324810f,
            4.223055f, 3.349680f, 20.471910f,
            4.940115f, 3.858915f, 22.635585f,
            5.723985f, 4.385745f, 24.818385f,
            6.577215f, 4.929405f, 27.012150f,
            7.505160f, 5.483265f, 29.228355f,
            8.513175f, 6.044010f, 31.466235f,
            9.605340f, 6.609855f, 33.719160f,
            10.774515f, 7.175445f, 35.990955f,
            11.963325f, 7.732620f, 38.291820f,
            13.169220f, 8.280870f, 40.609770f,
            14.394495f, 8.815095f, 42.945570f,
            15.641700f, 9.330450f, 45.298710f,
            16.914405f, 9.818520f, 47.675310f,
            18.214395f, 10.274970f, 50.070270f,
            19.542435f, 10.685775f, 52.478745f,
            20.900310f, 11.048640f, 54.898695f,
            22.289805f, 11.361780f, 57.327315f,
            23.712450f, 11.623665f, 59.761290f,
            25.169010f, 11.832510f, 62.195520f,
            26.660505f, 11.987040f, 64.624650f,
            28.186680f, 12.086745f, 67.042560f,
            29.747280f, 12.131370f, 69.441855f,
            31.341540f, 12.121680f, 71.814120f,
            32.967675f, 12.059715f, 74.150940f,
            34.623390f, 11.948280f, 76.442880f,
            36.306390f, 11.791710f, 78.681015f,
            38.013615f, 11.594340f, 80.856675f,
            39.741750f, 11.362545f, 82.961190f,
            41.485695f, 11.106270f, 84.985635f,
            43.241625f, 10.834695f, 86.922870f,
            45.005715f, 10.557510f, 88.768305f,
            46.774395f, 10.283895f, 90.517605f,
            48.543585f, 10.023795f, 92.168985f,
            50.310735f, 9.792000f, 93.721425f,
            52.073295f, 9.596160f, 95.175690f,
            53.829225f, 9.442650f, 96.533565f,
            55.576995f, 9.336825f, 97.798110f,
            57.314565f, 9.283275f, 98.972895f,
            59.042190f, 9.283275f, 100.062000f,
            60.759615f, 9.338355f, 101.070015f,
            62.466585f, 9.449025f, 102.001785f,
            64.163100f, 9.614775f, 102.861390f,
            65.849670f, 9.835605f, 103.653675f,
            67.526550f, 10.109985f, 104.382975f,
            69.193485f, 10.435110f, 105.053880f,
            70.851750f, 10.800015f, 105.669960f,
            72.501855f, 11.202915f, 106.235040f,
            74.144565f, 11.639220f, 106.752435f,
            75.780390f, 12.104850f, 107.225205f,
            77.409840f, 12.595980f, 107.656410f,
            79.033425f, 13.108785f, 108.048855f,
            80.651910f, 13.639950f, 108.404580f,
            82.265550f, 14.186670f, 108.726135f,
            83.874855f, 14.745885f, 109.015305f,
            85.480335f, 15.315300f, 109.273620f,
            87.082500f, 15.892875f, 109.503375f,
            88.681605f, 16.477080f, 109.705335f,
            90.278160f, 17.065875f, 109.881030f,
            91.872420f, 17.657985f, 110.031735f,
            93.464895f, 18.252645f, 110.158470f,
            95.055840f, 18.848325f, 110.262000f,
            96.645255f, 19.444515f, 110.343345f,
            98.233140f, 20.040705f, 110.403525f,
            99.820515f, 20.636385f, 110.442795f,
            101.406870f, 21.230535f, 110.461665f,
            102.992970f, 21.822900f, 110.460645f,
            104.578815f, 22.413480f, 110.439990f,
            106.164405f, 23.001765f, 110.400465f,
            107.749995f, 23.587755f, 110.342070f,
            109.335840f, 24.171450f, 110.265060f,
            110.921685f, 24.752595f, 110.169945f,
            112.507785f, 25.331190f, 110.056470f,
            114.094140f, 25.907235f, 109.925400f,
            115.681005f, 26.481240f, 109.776990f,
            117.268125f, 27.052695f, 109.610730f,
            118.855500f, 27.622110f, 109.426875f,
            120.443640f, 28.189485f, 109.225170f,
            122.032290f, 28.754820f, 109.006125f,
            123.621195f, 29.318370f, 108.769740f,
            125.210610f, 29.880645f, 108.515760f,
            126.800535f, 30.441645f, 108.244440f,
            128.390715f, 31.001625f, 107.955780f,
            129.981150f, 31.561095f, 107.649780f,
            131.571585f, 32.119800f, 107.326185f,
            133.162530f, 32.678250f, 106.984995f,
            134.753220f, 33.236955f, 106.626210f,
            136.344165f, 33.796170f, 106.250085f,
            137.934600f, 34.355895f, 105.856365f,
            139.525035f, 34.916895f, 105.445305f,
            141.114960f, 35.479170f, 105.016395f,
            142.704120f, 36.043230f, 104.569890f,
            144.292770f, 36.609585f, 104.105790f,
            145.880655f, 37.178235f, 103.624095f,
            147.467520f, 37.749945f, 103.124805f,
            149.052855f, 38.324970f, 102.608175f,
            150.637170f, 38.903565f, 102.073950f,
            152.219700f, 39.486240f, 101.521875f,
            153.800445f, 40.073505f, 100.952205f,
            155.379150f, 40.665870f, 100.365195f,
            156.955815f, 41.263335f, 99.760845f,
            158.529675f, 41.866920f, 99.139155f,
            160.100985f, 42.476625f, 98.500380f,
            161.669490f, 43.092960f, 97.844520f,
            163.234425f, 43.716690f, 97.171575f,
            164.796300f, 44.348070f, 96.481545f,
            166.354095f, 44.987355f, 95.774430f,
            167.908065f, 45.635310f, 95.050740f,
            169.457700f, 46.292445f, 94.310730f,
            171.002745f, 46.959015f, 93.554145f,
            172.542690f, 47.635785f, 92.781495f,
            174.077280f, 48.322755f, 91.993035f,
            175.606515f, 49.020945f, 91.188765f,
            177.129885f, 49.730355f, 90.368940f,
            178.646880f, 50.452005f, 89.533815f,
            180.157500f, 51.185640f, 88.683135f,
            181.660980f, 51.932280f, 87.817665f,
            183.157320f, 52.692180f, 86.937405f,
            184.646265f, 53.465850f, 86.043120f,
            186.126795f, 54.253545f, 85.134555f,
            187.599165f, 55.056030f, 84.212475f,
            189.062865f, 55.873560f, 83.276880f,
            190.517385f, 56.706390f, 82.328280f,
            191.962470f, 57.555030f, 81.366675f,
            193.397610f, 58.419735f, 80.392830f,
            194.822550f, 59.301270f, 79.406745f,
            196.236780f, 60.199635f, 78.408675f,
            197.640045f, 61.115085f, 77.399130f,
            199.031835f, 62.048385f, 76.378365f,
            200.411895f, 62.999280f, 75.346635f,
            201.779715f, 63.968280f, 74.304450f,
            203.134785f, 64.955640f, 73.252320f,
            204.477105f, 65.961870f, 72.190245f,
            205.805910f, 66.986460f, 71.118990f,
            207.120945f, 68.030430f, 70.038555f,
            208.421955f, 69.093270f, 68.949450f,
            209.708430f, 70.175235f, 67.851675f,
            210.979860f, 71.276835f, 66.746250f,
            212.236245f, 72.397815f, 65.632665f,
            213.477075f, 73.538175f, 64.511940f,
            214.702095f, 74.697915f, 63.383820f,
            215.910795f, 75.877545f, 62.248815f,
            217.102920f, 77.076300f, 61.107180f,
            218.277960f, 78.294690f, 59.958915f,
            219.435915f, 79.532460f, 58.804530f,
            220.576530f, 80.789610f, 57.644025f,
            221.699295f, 82.065885f, 56.477910f,
            222.803955f, 83.361030f, 55.305930f,
            223.890255f, 84.675300f, 54.128340f,
            224.957940f, 86.008185f, 52.945140f,
            226.007010f, 87.359430f, 51.756840f,
            227.036955f, 88.729035f, 50.562930f,
            228.047775f, 90.116745f, 49.363920f,
            229.038960f, 91.522305f, 48.159300f,
            230.010765f, 92.945460f, 46.949580f,
            230.962425f, 94.385700f, 45.734250f,
            231.894450f, 95.843280f, 44.513565f,
            232.806330f, 97.317180f, 43.287525f,
            233.697810f, 98.807655f, 42.055620f,
            234.569145f, 100.314195f, 40.817850f,
            235.419825f, 101.836545f, 39.574215f,
            236.249850f, 103.374195f, 38.324460f,
            237.059220f, 104.927145f, 37.068585f,
            237.847935f, 106.494885f, 35.806335f,
            238.615485f, 108.076905f, 34.537200f,
            239.362125f, 109.673205f, 33.261690f,
            240.087855f, 111.283275f, 31.979295f,
            240.792675f, 112.906860f, 30.690270f,
            241.476075f, 114.543705f, 29.394360f,
            242.138310f, 116.193300f, 28.091820f,
            242.779125f, 117.855390f, 26.782905f,
            243.399030f, 119.529720f, 25.467870f,
            243.997260f, 121.215780f, 24.147225f,
            244.574070f, 122.913570f, 22.822245f,
            245.129715f, 124.622580f, 21.493695f,
            245.663685f, 126.342810f, 20.163615f,
            246.176235f, 128.073495f, 18.834045f,
            246.667110f, 129.814890f, 17.508045f,
            247.136565f, 131.566230f, 16.189440f,
            247.584345f, 133.327515f, 14.883585f,
            248.010450f, 135.098490f, 13.597620f,
            248.414880f, 136.878900f, 12.339960f,
            248.797635f, 138.668490f, 11.122590f,
            249.158460f, 140.466750f, 9.957750f,
            249.497610f, 142.273935f, 8.907405f,
            249.814830f, 144.089535f, 8.009295f,
            250.110120f, 145.913295f, 7.269540f,
            250.383225f, 147.744960f, 6.693750f,
            250.634655f, 149.584530f, 6.288555f,
            250.863645f, 151.431495f, 6.061350f,
            251.070705f, 153.286110f, 6.019530f,
            251.255325f, 155.147610f, 6.171510f,
            251.417760f, 157.016250f, 6.525960f,
            251.558010f, 158.891775f, 7.092570f,
            251.675820f, 160.773675f, 7.881540f,
            251.770935f, 162.661950f, 8.903580f,
            251.843610f, 164.556600f, 10.170930f,
            251.893845f, 166.457115f, 11.623155f,
            251.921130f, 168.363750f, 13.196250f,
            251.925975f, 170.275740f, 14.873895f,
            251.907870f, 172.193085f, 16.640535f,
            251.867070f, 174.115785f, 18.484695f,
            251.803320f, 176.043330f, 20.397450f,
            251.716620f, 177.975720f, 22.371405f,
            251.606970f, 179.912700f, 24.401970f,
            251.474625f, 181.854015f, 26.485065f,
            251.319330f, 183.799410f, 28.618395f,
            251.140575f, 185.748885f, 30.800175f,
            250.939125f, 187.702185f, 33.029385f,
            250.714980f, 189.658290f, 35.305515f,
            250.468140f, 191.617710f, 37.629075f,
            250.199115f, 193.579425f, 40.000065f,
            249.908160f, 195.543435f, 42.420015f,
            249.595530f, 197.508975f, 44.889435f,
            249.261735f, 199.475790f, 47.410365f,
            248.907540f, 201.443370f, 49.984590f,
            248.532690f, 203.411460f, 52.614660f,
            248.137440f, 205.379295f, 55.303635f,
            247.724340f, 207.346110f, 58.052790f,
            247.294665f, 209.310375f, 60.864930f,
            246.850455f, 211.271325f, 63.742860f,
            246.391965f, 213.228705f, 66.691170f,
            245.920470f, 215.181240f, 69.714705f,
            245.441835f, 217.126380f, 72.814230f,
            244.959630f, 219.062595f, 75.992550f,
            244.473600f, 220.989120f, 79.259100f,
            243.992670f, 222.902895f, 82.613370f,
            243.524235f, 224.800095f, 86.056125f,
            243.069825f, 226.680210f, 89.599095f,
            242.644230f, 228.537630f, 93.234885f,
            242.254590f, 230.369295f, 96.969105f,
            241.914165f, 232.170615f, 100.798695f,
            241.636470f, 233.936745f, 104.719575f,
            241.436295f, 235.662840f, 108.725115f,
            241.329960f, 237.344055f, 112.803585f,
            241.332765f, 238.975545f, 116.940960f,
            241.460265f, 240.553740f, 121.117350f,
            241.723935f, 242.076090f, 125.313630f,
            242.133975f, 243.541065f, 129.504300f,
            242.693700f, 244.949685f, 133.671765f,
            243.404895f, 246.303480f, 137.792055f,
            244.263480f, 247.605765f, 141.850125f,
            245.262060f, 248.860620f, 145.840875f,
            246.393495f, 250.072890f, 149.737530f,
            247.646310f, 251.246910f, 153.549270f,
            249.010305f, 252.387015f, 157.273800f,
            250.475535f, 253.497795f, 160.909335f,
            252.032310f, 254.582820f, 164.455620f,
    };

    private float[] viridis = {68.086020f, 1.242870f, 84.000825f,
            68.470050f, 2.449275f, 85.533885f,
            68.835720f, 3.729375f, 87.051645f,
            69.182775f, 5.085210f, 88.553595f,
            69.511470f, 6.518565f, 90.038715f,
            69.821295f, 8.031735f, 91.507515f,
            70.112760f, 9.626760f, 92.958465f,
            70.385610f, 11.262585f, 94.391820f,
            70.639590f, 12.837720f, 95.807325f,
            70.874955f, 14.362620f, 97.203705f,
            71.091705f, 15.846975f, 98.580960f,
            71.289330f, 17.298180f, 99.938835f,
            71.468085f, 18.721335f, 101.276565f,
            71.627970f, 20.121285f, 102.593895f,
            71.768730f, 21.501600f, 103.890570f,
            71.890620f, 22.864830f, 105.165825f,
            71.993385f, 24.213525f, 106.419405f,
            72.077280f, 25.549980f, 107.650800f,
            72.142050f, 26.875215f, 108.860010f,
            72.188205f, 28.191015f, 110.046270f,
            72.215235f, 29.498400f, 111.209325f,
            72.223395f, 30.798135f, 112.348920f,
            72.212685f, 32.091240f, 113.464800f,
            72.183360f, 33.378225f, 114.556455f,
            72.135420f, 34.659600f, 115.623885f,
            72.068865f, 35.936130f, 116.666835f,
            71.983950f, 37.207560f, 117.685050f,
            71.881185f, 38.474655f, 118.678275f,
            71.760060f, 39.737670f, 119.646255f,
            71.621340f, 40.996605f, 120.589245f,
            71.465025f, 42.251715f, 121.506990f,
            71.291370f, 43.502745f, 122.399235f,
            71.100630f, 44.749950f, 123.266235f,
            70.893060f, 45.993585f, 124.107735f,
            70.669170f, 47.233140f, 124.923990f,
            70.429470f, 48.468870f, 125.715255f,
            70.173705f, 49.700775f, 126.481275f,
            69.902640f, 50.928855f, 127.222305f,
            69.616530f, 52.152600f, 127.938855f,
            69.316140f, 53.372265f, 128.630670f,
            69.001725f, 54.587595f, 129.298260f,
            68.673540f, 55.798590f, 129.942135f,
            68.331840f, 57.004995f, 130.562040f,
            67.977900f, 58.206810f, 131.158995f,
            67.611975f, 59.403780f, 131.732745f,
            67.234065f, 60.595905f, 132.284310f,
            66.845190f, 61.782930f, 132.813435f,
            66.445605f, 62.965110f, 133.321140f,
            66.036075f, 64.141935f, 133.807680f,
            65.617110f, 65.313150f, 134.273565f,
            65.189475f, 66.479265f, 134.719560f,
            64.753425f, 67.639770f, 135.145665f,
            64.309470f, 68.794665f, 135.552645f,
            63.858375f, 69.943950f, 135.941265f,
            63.400395f, 71.087625f, 136.311780f,
            62.936805f, 72.225435f, 136.664955f,
            62.467860f, 73.357125f, 137.001300f,
            61.993815f, 74.483460f, 137.321580f,
            61.515435f, 75.603675f, 137.625795f,
            61.033230f, 76.718025f, 137.915220f,
            60.547455f, 77.826510f, 138.189855f,
            60.059130f, 78.929385f, 138.450720f,
            59.568765f, 80.026140f, 138.698070f,
            59.076870f, 81.117030f, 138.932670f,
            58.583445f, 82.202055f, 139.155030f,
            58.089510f, 83.281470f, 139.365660f,
            57.595065f, 84.355275f, 139.565070f,
            57.100875f, 85.423470f, 139.753515f,
            56.607195f, 86.486055f, 139.931760f,
            56.114535f, 87.543285f, 140.100315f,
            55.623150f, 88.595160f, 140.259690f,
            55.133550f, 89.641425f, 140.409885f,
            54.645990f, 90.682845f, 140.551920f,
            54.160725f, 91.719165f, 140.686050f,
            53.678265f, 92.750385f, 140.812530f,
            53.198865f, 93.776760f, 140.932125f,
            52.722780f, 94.798290f, 141.044835f,
            52.250265f, 95.815230f, 141.150915f,
            51.781065f, 96.827580f, 141.250875f,
            51.315945f, 97.835850f, 141.344970f,
            50.854650f, 98.839785f, 141.433710f,
            50.397180f, 99.839640f, 141.517095f,
            49.944300f, 100.835415f, 141.595380f,
            49.495500f, 101.827365f, 141.669075f,
            49.051035f, 102.815745f, 141.738180f,
            48.610905f, 103.800555f, 141.802695f,
            48.175365f, 104.782050f, 141.863130f,
            47.743905f, 105.760230f, 141.919485f,
            47.316780f, 106.735350f, 141.972015f,
            46.893990f, 107.707665f, 142.020720f,
            46.475280f, 108.676920f, 142.065600f,
            46.060395f, 109.643625f, 142.106910f,
            45.649845f, 110.607780f, 142.144650f,
            45.242865f, 111.569385f, 142.179075f,
            44.839455f, 112.528950f, 142.209675f,
            44.439870f, 113.486220f, 142.236960f,
            44.043345f, 114.441705f, 142.260675f,
            43.649880f, 115.395150f, 142.281075f,
            43.259730f, 116.346810f, 142.297650f,
            42.872130f, 117.296940f, 142.310910f,
            42.487335f, 118.245540f, 142.320345f,
            42.104835f, 119.192865f, 142.325955f,
            41.724375f, 120.138915f, 142.327740f,
            41.346210f, 121.083690f, 142.325700f,
            40.969575f, 122.027700f, 142.319325f,
            40.594470f, 122.970435f, 142.308615f,
            40.220895f, 123.912660f, 142.293315f,
            39.848850f, 124.854120f, 142.273680f,
            39.477825f, 125.794815f, 142.249200f,
            39.107820f, 126.735000f, 142.219620f,
            38.739090f, 127.674675f, 142.184685f,
            38.371380f, 128.614095f, 142.144650f,
            38.004945f, 129.553005f, 142.098750f,
            37.639785f, 130.491915f, 142.047495f,
            37.275900f, 131.430315f, 141.989865f,
            36.913545f, 132.368715f, 141.925860f,
            36.552465f, 133.307115f, 141.855225f,
            36.193425f, 134.245515f, 141.777705f,
            35.836680f, 135.183660f, 141.693045f,
            35.482485f, 136.122060f, 141.600990f,
            35.131350f, 137.060460f, 141.501030f,
            34.784040f, 137.999115f, 141.393165f,
            34.441830f, 138.937515f, 141.277395f,
            34.104465f, 139.876425f, 141.152955f,
            33.773220f, 140.815080f, 141.019590f,
            33.448860f, 141.754245f, 140.877045f,
            33.132915f, 142.693410f, 140.725320f,
            32.825895f, 143.632575f, 140.563395f,
            32.529840f, 144.571995f, 140.391780f,
            32.245515f, 145.511415f, 140.209455f,
            31.975470f, 146.451090f, 140.016930f,
            31.720725f, 147.390510f, 139.813185f,
            31.483065f, 148.330185f, 139.598475f,
            31.264530f, 149.269605f, 139.372035f,
            31.066905f, 150.209025f, 139.133865f,
            30.892740f, 151.148445f, 138.883455f,
            30.744075f, 152.087610f, 138.620805f,
            30.623460f, 153.026520f, 138.345150f,
            30.533190f, 153.965175f, 138.057000f,
            30.475560f, 154.903320f, 137.755590f,
            30.452865f, 155.840955f, 137.440410f,
            30.468165f, 156.778335f, 137.111460f,
            30.523245f, 157.714950f, 136.768485f,
            30.620655f, 158.651055f, 136.411230f,
            30.762690f, 159.586140f, 136.039440f,
            30.951900f, 160.520460f, 135.653115f,
            31.189560f, 161.454015f, 135.251490f,
            31.478220f, 162.386295f, 134.834565f,
            31.818900f, 163.317555f, 134.402340f,
            32.213130f, 164.247285f, 133.954305f,
            32.662185f, 165.175995f, 133.490205f,
            33.167085f, 166.102920f, 133.010040f,
            33.728340f, 167.028570f, 132.513555f,
            34.346460f, 167.952180f, 132.000495f,
            35.021445f, 168.874260f, 131.470605f,
            35.753550f, 169.794045f, 130.923885f,
            36.542265f, 170.712045f, 130.359825f,
            37.387080f, 171.627750f, 129.778680f,
            38.287740f, 172.540905f, 129.180195f,
            39.242970f, 173.451765f, 128.563860f,
            40.252005f, 174.360075f, 127.929930f,
            41.314080f, 175.265580f, 127.277895f,
            42.427665f, 176.168280f, 126.608010f,
            43.591740f, 177.067920f, 125.919765f,
            44.805285f, 177.964500f, 125.213415f,
            46.066515f, 178.857510f, 124.488195f,
            47.374665f, 179.747205f, 123.744615f,
            48.727950f, 180.633330f, 122.982420f,
            50.125605f, 181.515885f, 122.201355f,
            51.565845f, 182.394360f, 121.401420f,
            53.047650f, 183.268755f, 120.582615f,
            54.570000f, 184.139070f, 119.744940f,
            56.131620f, 185.004795f, 118.887630f,
            57.731235f, 185.866440f, 118.011195f,
            59.367825f, 186.722985f, 117.115635f,
            61.040370f, 187.574940f, 116.200440f,
            62.747850f, 188.422050f, 115.266120f,
            64.489245f, 189.263805f, 114.312420f,
            66.263535f, 190.100460f, 113.339085f,
            68.069955f, 190.931505f, 112.346115f,
            69.907995f, 191.756940f, 111.333255f,
            71.776635f, 192.576765f, 110.300760f,
            73.674855f, 193.390470f, 109.248630f,
            75.602145f, 194.198055f, 108.176865f,
            77.557740f, 194.999520f, 107.085465f,
            79.540875f, 195.794610f, 105.974430f,
            81.551295f, 196.583070f, 104.843760f,
            83.587980f, 197.364900f, 103.693200f,
            85.650675f, 198.139590f, 102.522495f,
            87.738870f, 198.907395f, 101.332155f,
            89.851800f, 199.667805f, 100.122180f,
            91.988955f, 200.420820f, 98.892570f,
            94.149570f, 201.166440f, 97.643070f,
            96.333645f, 201.904155f, 96.374445f,
            98.540415f, 202.634220f, 95.085930f,
            100.769370f, 203.356125f, 93.778035f,
            103.020255f, 204.070125f, 92.450760f,
            105.292815f, 204.775455f, 91.103595f,
            107.586540f, 205.472370f, 89.737050f,
            109.900665f, 206.160615f, 88.351380f,
            112.234935f, 206.840190f, 86.946585f,
            114.588840f, 207.510840f, 85.522920f,
            116.961870f, 208.172565f, 84.080385f,
            119.353515f, 208.824855f, 82.619490f,
            121.763520f, 209.468220f, 81.139725f,
            124.191630f, 210.101895f, 79.641855f,
            126.636825f, 210.725880f, 78.126135f,
            129.099105f, 211.340430f, 76.592310f,
            131.577960f, 211.945290f, 75.041145f,
            134.072880f, 212.540205f, 73.472385f,
            136.583355f, 213.125175f, 71.886540f,
            139.108620f, 213.699945f, 70.284630f,
            141.648420f, 214.264770f, 68.666655f,
            144.201990f, 214.819650f, 67.033635f,
            146.768565f, 215.364330f, 65.385825f,
            149.347890f, 215.898555f, 63.723735f,
            151.938945f, 216.422835f, 62.048895f,
            154.541475f, 216.936915f, 60.361560f,
            157.154715f, 217.440795f, 58.663260f,
            159.777645f, 217.934475f, 56.955015f,
            162.410010f, 218.418210f, 55.238100f,
            165.050535f, 218.892000f, 53.514555f,
            167.698710f, 219.355845f, 51.785910f,
            170.353770f, 219.809745f, 50.054715f,
            173.014695f, 220.254210f, 48.323265f,
            175.680720f, 220.689240f, 46.594875f,
            178.350825f, 221.114835f, 44.872605f,
            181.023990f, 221.531505f, 43.160535f,
            183.699705f, 221.939250f, 41.463765f,
            186.376695f, 222.338580f, 39.787395f,
            189.053940f, 222.729495f, 38.138055f,
            191.730420f, 223.112505f, 36.523140f,
            194.405115f, 223.488120f, 34.951320f,
            197.077260f, 223.856340f, 33.432795f,
            199.745325f, 224.217675f, 31.978275f,
            202.408800f, 224.572890f, 30.601275f,
            205.066410f, 224.921730f, 29.316075f,
            207.716880f, 225.265215f, 28.138485f,
            210.359700f, 225.603600f, 27.085335f,
            212.993850f, 225.937395f, 26.174730f,
            215.618055f, 226.267110f, 25.424010f,
            218.231550f, 226.593255f, 24.850260f,
            220.833315f, 226.916340f, 24.468015f,
            223.422840f, 227.236875f, 24.288750f,
            225.999105f, 227.555370f, 24.320370f,
            228.561600f, 227.872080f, 24.565425f,
            231.109305f, 228.188025f, 25.021875f,
            233.641710f, 228.503205f, 25.682835f,
            236.157030f, 228.819150f, 26.538105f,
            238.655520f, 229.135350f, 27.573405f,
            241.137180f, 229.452825f, 28.773690f,
            243.601500f, 229.771575f, 30.122640f,
            246.047970f, 230.092365f, 31.604955f,
            248.476335f, 230.415450f, 33.204825f,
            250.886340f, 230.741085f, 34.908735f,
            253.278240f, 231.070035f, 36.703680f,
    };
    private float[] jet = {
            0.000000f, 0.000000f, 127.500000f,
            0.000000f, 0.000000f, 131.500000f,
            0.000000f, 0.000000f, 135.500000f,
            0.000000f, 0.000000f, 139.500000f,
            0.000000f, 0.000000f, 143.500000f,
            0.000000f, 0.000000f, 147.500000f,
            0.000000f, 0.000000f, 151.500000f,
            0.000000f, 0.000000f, 155.500000f,
            0.000000f, 0.000000f, 159.500000f,
            0.000000f, 0.000000f, 163.500000f,
            0.000000f, 0.000000f, 167.500000f,
            0.000000f, 0.000000f, 171.500000f,
            0.000000f, 0.000000f, 175.500000f,
            0.000000f, 0.000000f, 179.500000f,
            0.000000f, 0.000000f, 183.500000f,
            0.000000f, 0.000000f, 187.500000f,
            0.000000f, 0.000000f, 191.500000f,
            0.000000f, 0.000000f, 195.500000f,
            0.000000f, 0.000000f, 199.500000f,
            0.000000f, 0.000000f, 203.500000f,
            0.000000f, 0.000000f, 207.500000f,
            0.000000f, 0.000000f, 211.500000f,
            0.000000f, 0.000000f, 215.500000f,
            0.000000f, 0.000000f, 219.500000f,
            0.000000f, 0.000000f, 223.500000f,
            0.000000f, 0.000000f, 227.500000f,
            0.000000f, 0.000000f, 231.500000f,
            0.000000f, 0.000000f, 235.500000f,
            0.000000f, 0.000000f, 239.500000f,
            0.000000f, 0.000000f, 243.500000f,
            0.000000f, 0.000000f, 247.500000f,
            0.000000f, 0.000000f, 251.500000f,
            0.000000f, 0.500000f, 255.000000f,
            0.000000f, 4.500000f, 255.000000f,
            0.000000f, 8.500000f, 255.000000f,
            0.000000f, 12.500000f, 255.000000f,
            0.000000f, 16.500000f, 255.000000f,
            0.000000f, 20.500000f, 255.000000f,
            0.000000f, 24.500000f, 255.000000f,
            0.000000f, 28.500000f, 255.000000f,
            0.000000f, 32.500000f, 255.000000f,
            0.000000f, 36.500000f, 255.000000f,
            0.000000f, 40.500000f, 255.000000f,
            0.000000f, 44.500000f, 255.000000f,
            0.000000f, 48.500000f, 255.000000f,
            0.000000f, 52.500000f, 255.000000f,
            0.000000f, 56.500000f, 255.000000f,
            0.000000f, 60.500000f, 255.000000f,
            0.000000f, 64.500000f, 255.000000f,
            0.000000f, 68.500000f, 255.000000f,
            0.000000f, 72.500000f, 255.000000f,
            0.000000f, 76.500000f, 255.000000f,
            0.000000f, 80.500000f, 255.000000f,
            0.000000f, 84.500000f, 255.000000f,
            0.000000f, 88.500000f, 255.000000f,
            0.000000f, 92.500000f, 255.000000f,
            0.000000f, 96.500000f, 255.000000f,
            0.000000f, 100.500000f, 255.000000f,
            0.000000f, 104.500000f, 255.000000f,
            0.000000f, 108.500000f, 255.000000f,
            0.000000f, 112.500000f, 255.000000f,
            0.000000f, 116.500000f, 255.000000f,
            0.000000f, 120.500000f, 255.000000f,
            0.000000f, 124.500000f, 255.000000f,
            0.000000f, 128.500000f, 255.000000f,
            0.000000f, 132.500000f, 255.000000f,
            0.000000f, 136.500000f, 255.000000f,
            0.000000f, 140.500000f, 255.000000f,
            0.000000f, 144.500000f, 255.000000f,
            0.000000f, 148.500000f, 255.000000f,
            0.000000f, 152.500000f, 255.000000f,
            0.000000f, 156.500000f, 255.000000f,
            0.000000f, 160.500000f, 255.000000f,
            0.000000f, 164.500000f, 255.000000f,
            0.000000f, 168.500000f, 255.000000f,
            0.000000f, 172.500000f, 255.000000f,
            0.000000f, 176.500000f, 255.000000f,
            0.000000f, 180.500000f, 255.000000f,
            0.000000f, 184.500000f, 255.000000f,
            0.000000f, 188.500000f, 255.000000f,
            0.000000f, 192.500000f, 255.000000f,
            0.000000f, 196.500000f, 255.000000f,
            0.000000f, 200.500000f, 255.000000f,
            0.000000f, 204.500000f, 255.000000f,
            0.000000f, 208.500000f, 255.000000f,
            0.000000f, 212.500000f, 255.000000f,
            0.000000f, 216.500000f, 255.000000f,
            0.000000f, 220.500000f, 255.000000f,
            0.000000f, 224.500000f, 255.000000f,
            0.000000f, 228.500000f, 255.000000f,
            0.000000f, 232.500000f, 255.000000f,
            0.000000f, 236.500000f, 255.000000f,
            0.000000f, 240.500000f, 255.000000f,
            0.000000f, 244.500000f, 255.000000f,
            0.000000f, 248.500000f, 255.000000f,
            0.000000f, 252.500000f, 255.000000f,
            1.500000f, 255.000000f, 253.500000f,
            5.500000f, 255.000000f, 249.500000f,
            9.500000f, 255.000000f, 245.500000f,
            13.500000f, 255.000000f, 241.500000f,
            17.500000f, 255.000000f, 237.500000f,
            21.500000f, 255.000000f, 233.500000f,
            25.500000f, 255.000000f, 229.500000f,
            29.500000f, 255.000000f, 225.500000f,
            33.500000f, 255.000000f, 221.500000f,
            37.500000f, 255.000000f, 217.500000f,
            41.500000f, 255.000000f, 213.500000f,
            45.500000f, 255.000000f, 209.500000f,
            49.500000f, 255.000000f, 205.500000f,
            53.500000f, 255.000000f, 201.500000f,
            57.500000f, 255.000000f, 197.500000f,
            61.500000f, 255.000000f, 193.500000f,
            65.500000f, 255.000000f, 189.500000f,
            69.500000f, 255.000000f, 185.500000f,
            73.500000f, 255.000000f, 181.500000f,
            77.500000f, 255.000000f, 177.500000f,
            81.500000f, 255.000000f, 173.500000f,
            85.500000f, 255.000000f, 169.500000f,
            89.500000f, 255.000000f, 165.500000f,
            93.500000f, 255.000000f, 161.500000f,
            97.500000f, 255.000000f, 157.500000f,
            101.500000f, 255.000000f, 153.500000f,
            105.500000f, 255.000000f, 149.500000f,
            109.500000f, 255.000000f, 145.500000f,
            113.500000f, 255.000000f, 141.500000f,
            117.500000f, 255.000000f, 137.500000f,
            121.500000f, 255.000000f, 133.500000f,
            125.500000f, 255.000000f, 129.500000f,
            129.500000f, 255.000000f, 125.500000f,
            133.500000f, 255.000000f, 121.500000f,
            137.500000f, 255.000000f, 117.500000f,
            141.500000f, 255.000000f, 113.500000f,
            145.500000f, 255.000000f, 109.500000f,
            149.500000f, 255.000000f, 105.500000f,
            153.500000f, 255.000000f, 101.500000f,
            157.500000f, 255.000000f, 97.500000f,
            161.500000f, 255.000000f, 93.500000f,
            165.500000f, 255.000000f, 89.500000f,
            169.500000f, 255.000000f, 85.500000f,
            173.500000f, 255.000000f, 81.500000f,
            177.500000f, 255.000000f, 77.500000f,
            181.500000f, 255.000000f, 73.500000f,
            185.500000f, 255.000000f, 69.500000f,
            189.500000f, 255.000000f, 65.500000f,
            193.500000f, 255.000000f, 61.500000f,
            197.500000f, 255.000000f, 57.500000f,
            201.500000f, 255.000000f, 53.500000f,
            205.500000f, 255.000000f, 49.500000f,
            209.500000f, 255.000000f, 45.500000f,
            213.500000f, 255.000000f, 41.500000f,
            217.500000f, 255.000000f, 37.500000f,
            221.500000f, 255.000000f, 33.500000f,
            225.500000f, 255.000000f, 29.500000f,
            229.500000f, 255.000000f, 25.500000f,
            233.500000f, 255.000000f, 21.500000f,
            237.500000f, 255.000000f, 17.500000f,
            241.500000f, 255.000000f, 13.500000f,
            245.500000f, 255.000000f, 9.500000f,
            249.500000f, 255.000000f, 5.500000f,
            253.500000f, 255.000000f, 1.500000f,
            255.000000f, 252.500000f, 0.000000f,
            255.000000f, 248.500000f, 0.000000f,
            255.000000f, 244.500000f, 0.000000f,
            255.000000f, 240.500000f, 0.000000f,
            255.000000f, 236.500000f, 0.000000f,
            255.000000f, 232.500000f, 0.000000f,
            255.000000f, 228.500000f, 0.000000f,
            255.000000f, 224.500000f, 0.000000f,
            255.000000f, 220.500000f, 0.000000f,
            255.000000f, 216.500000f, 0.000000f,
            255.000000f, 212.500000f, 0.000000f,
            255.000000f, 208.500000f, 0.000000f,
            255.000000f, 204.500000f, 0.000000f,
            255.000000f, 200.500000f, 0.000000f,
            255.000000f, 196.500000f, 0.000000f,
            255.000000f, 192.500000f, 0.000000f,
            255.000000f, 188.500000f, 0.000000f,
            255.000000f, 184.500000f, 0.000000f,
            255.000000f, 180.500000f, 0.000000f,
            255.000000f, 176.500000f, 0.000000f,
            255.000000f, 172.500000f, 0.000000f,
            255.000000f, 168.500000f, 0.000000f,
            255.000000f, 164.500000f, 0.000000f,
            255.000000f, 160.500000f, 0.000000f,
            255.000000f, 156.500000f, 0.000000f,
            255.000000f, 152.500000f, 0.000000f,
            255.000000f, 148.500000f, 0.000000f,
            255.000000f, 144.500000f, 0.000000f,
            255.000000f, 140.500000f, 0.000000f,
            255.000000f, 136.500000f, 0.000000f,
            255.000000f, 132.500000f, 0.000000f,
            255.000000f, 128.500000f, 0.000000f,
            255.000000f, 124.500000f, 0.000000f,
            255.000000f, 120.500000f, 0.000000f,
            255.000000f, 116.500000f, 0.000000f,
            255.000000f, 112.500000f, 0.000000f,
            255.000000f, 108.500000f, 0.000000f,
            255.000000f, 104.500000f, 0.000000f,
            255.000000f, 100.500000f, 0.000000f,
            255.000000f, 96.500000f, 0.000000f,
            255.000000f, 92.500000f, 0.000000f,
            255.000000f, 88.500000f, 0.000000f,
            255.000000f, 84.500000f, 0.000000f,
            255.000000f, 80.500000f, 0.000000f,
            255.000000f, 76.500000f, 0.000000f,
            255.000000f, 72.500000f, 0.000000f,
            255.000000f, 68.500000f, 0.000000f,
            255.000000f, 64.500000f, 0.000000f,
            255.000000f, 60.500000f, 0.000000f,
            255.000000f, 56.500000f, 0.000000f,
            255.000000f, 52.500000f, 0.000000f,
            255.000000f, 48.500000f, 0.000000f,
            255.000000f, 44.500000f, 0.000000f,
            255.000000f, 40.500000f, 0.000000f,
            255.000000f, 36.500000f, 0.000000f,
            255.000000f, 32.500000f, 0.000000f,
            255.000000f, 28.500000f, 0.000000f,
            255.000000f, 24.500000f, 0.000000f,
            255.000000f, 20.500000f, 0.000000f,
            255.000000f, 16.500000f, 0.000000f,
            255.000000f, 12.500000f, 0.000000f,
            255.000000f, 8.500000f, 0.000000f,
            255.000000f, 4.500000f, 0.000000f,
            255.000000f, 0.500000f, 0.000000f,
            251.500000f, 0.000000f, 0.000000f,
            247.500000f, 0.000000f, 0.000000f,
            243.500000f, 0.000000f, 0.000000f,
            239.500000f, 0.000000f, 0.000000f,
            235.500000f, 0.000000f, 0.000000f,
            231.500000f, 0.000000f, 0.000000f,
            227.500000f, 0.000000f, 0.000000f,
            223.500000f, 0.000000f, 0.000000f,
            219.500000f, 0.000000f, 0.000000f,
            215.500000f, 0.000000f, 0.000000f,
            211.500000f, 0.000000f, 0.000000f,
            207.500000f, 0.000000f, 0.000000f,
            203.500000f, 0.000000f, 0.000000f,
            199.500000f, 0.000000f, 0.000000f,
            195.500000f, 0.000000f, 0.000000f,
            191.500000f, 0.000000f, 0.000000f,
            187.500000f, 0.000000f, 0.000000f,
            183.500000f, 0.000000f, 0.000000f,
            179.500000f, 0.000000f, 0.000000f,
            175.500000f, 0.000000f, 0.000000f,
            171.500000f, 0.000000f, 0.000000f,
            167.500000f, 0.000000f, 0.000000f,
            163.500000f, 0.000000f, 0.000000f,
            159.500000f, 0.000000f, 0.000000f,
            155.500000f, 0.000000f, 0.000000f,
            151.500000f, 0.000000f, 0.000000f,
            147.500000f, 0.000000f, 0.000000f,
            143.500000f, 0.000000f, 0.000000f,
            139.500000f, 0.000000f, 0.000000f,
            135.500000f, 0.000000f, 0.000000f,
            131.500000f, 0.000000f, 0.000000f,
            127.500000f, 0.000000f, 0.000000f
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_text_on_preview);

        inputCamera = InputCamera.useBackCamera();

        displaySurfaceView = (SurfaceView) findViewById(R.id.text_on_preview_surfaceview);
        SurfaceHolder sh = displaySurfaceView.getHolder();
        sh.addCallback(this);

        mHandler = new MainHandler(this);
    }

    @Override
    protected void onResume() {
        super.onResume();
        openCamera(inputCamera.getCameraWidth(), inputCamera.getCameraHeight(),
                inputCamera.getFps(), inputCamera.getDisplayOrientation());
    }

    @Override
    protected void onPause() {
        super.onPause();
        releaseCamera();

        if (mCameraTexture != null) {
            mCameraTexture.release();
            mCameraTexture = null;
        }
        if (mDisplaySurface != null) {
            mDisplaySurface.release();
            mDisplaySurface = null;
        }
        if (mVideoSprite != null) {
            mVideoSprite = null;
        }
        if (mEglCore != null) {
            mEglCore.release();
            mEglCore = null;
        }
        Log.d(TAG, "onPause() done");
    }

    /**
     * Opens a camera, and attempts to establish preview mode at the specified width and height.
     * <p>
     * Sets mCameraPreviewFps to the expected frame rate (which might actually be variable).
     */
    private void openCamera(int desiredWidth, int desiredHeight, int desiredFps, int orientation) {
        if (mCamera != null) {
            throw new RuntimeException("camera already initialized");
        }
        if (orientation != 0 && orientation != 90 && orientation != 180 && orientation != 270) {
            throw new RuntimeException("Orientation values must be in {0,90,180,270}");
        }

        mCamera = Camera.open(inputCamera.getCameraIndex());
        if (mCamera == null) {
            throw new RuntimeException("Unable to open camera");
        }

        Camera.Parameters parms = mCamera.getParameters();
        CameraUtils.choosePreviewSize(parms, desiredWidth, desiredHeight);

        // Try to set the frame rate to a constant value.
        float cameraPreviewThousandFps = CameraUtils.chooseFixedPreviewFps(parms,
                desiredFps * 1000);

        // Give the camera a hint that we're recording video. This can have a big
        // impact on frame rate.
        parms.setRecordingHint(true);
        mCamera.setDisplayOrientation(orientation);
        mCamera.setParameters(parms);

        Camera.Size cameraPreviewSize = parms.getPreviewSize();
        String previewFacts = cameraPreviewSize.width + "x" + cameraPreviewSize.height +
                " @" + (cameraPreviewThousandFps / 1000.0f) + "fps";
        Log.i(TAG, "Camera config: " + previewFacts);
    }

    /**
     * Stops camera preview, and releases the camera to the system.
     */
    private void releaseCamera() {
        if (mCamera != null) {
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
            Log.d(TAG, "releaseCamera -- done");
        }
    }

    @Override   // SurfaceHolder.Callback
    public void surfaceCreated(SurfaceHolder holder) {
        Log.d(TAG, "surfaceCreated holder=" + holder);

        // Set up everything that requires an EGL context.
        //
        // We had to wait until we had a surface because you can't make an EGL context current
        // without one, and creating a temporary 1x1 pbuffer is a waste of time.
        //
        // The display surface that we use for the SurfaceView, and the encoder surface we
        // use for video, use the same EGL context.
        mEglCore = new EglCore(null, EglCore.FLAG_RECORDABLE);
        mDisplaySurface = new WindowSurface(mEglCore, holder.getSurface(), false);
        mDisplaySurface.makeCurrent();

        float screenAspect = ((float) mDisplaySurface.getWidth()) / mDisplaySurface.getHeight();

        float near = -1.0f, far = 1.0f,
                right = inputCamera.getDisplayWidth() / 2,
                top = right / screenAspect;

        Matrix.orthoM(mDisplayProjectionMatrix, 0,
                -right, right,
                -top, top,
                near, far);

        mVideoSprite = new Sprite3d(new Drawable2d(inputCamera.getDisplayWidth(),
                inputCamera.getDisplayHeight()));
        mLutProgram = new LutProgram();
        int videoTextureId = mLutProgram.createTextureObject(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
        mVideoSprite.setTextureId(videoTextureId);

        mVideoSprite.transform(new Sprite3d.Transformer()
                .reset()
                .translate(0, 0, 0)
                .rotateAroundZ(0)
                .scale(1, 1, 1)
                .build());

        setLut();

        mCameraTexture = new SurfaceTexture(videoTextureId);
        mCameraTexture.setOnFrameAvailableListener(this);

        try {
            mCamera.setPreviewTexture(mCameraTexture);
        } catch (IOException ioe) {
            throw new RuntimeException(ioe);
        }
        mCamera.startPreview();
    }

    private void setLut() {
        lutTextureId = mLutProgram.createTextureObject(GLES20.GL_TEXTURE_2D);

        int[] colorArray = new int[256];
        byte[] data = new byte[4 * colorArray.length];
        for (int i = 0; i < colorArray.length; i++) {
            colorArray[i] = getRandomColor(i);
            data[i * 4 + 0] = byteToInt(colorArray[i], 16);
            data[i * 4 + 1] = byteToInt(colorArray[i], 8);
            data[i * 4 + 2] = byteToInt(colorArray[i], 0);
            data[i * 4 + 3] = byteToInt(colorArray[i], 24);
        }
        mLutProgram.setLutTexture(data, lutTextureId);
    }

    private int getRandomColor(int index) {
        return makeColor(((int) inferno[3 * index]), ((int) inferno[3 * index + 1]), ((int) inferno[3 * index + 2]));
    }

    private int makeColor(int v0, int v1, int v2) {
        return (v0 << 16) | (v1 << 8) | (v2);
    }

    private byte byteToInt(int i, int j) {
        return (byte) (i >> j);
    }

    @Override   // SurfaceHolder.Callback
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        Log.d(TAG, "surfaceChanged fmt=" + format + " size=" + width + "x" + height +
                " holder=" + holder);
    }

    @Override   // SurfaceHolder.Callback
    public void surfaceDestroyed(SurfaceHolder holder) {
        Log.d(TAG, "surfaceDestroyed holder=" + holder);
    }

    @Override   // SurfaceTexture.OnFrameAvailableListener; runs on arbitrary thread
    public void onFrameAvailable(SurfaceTexture surfaceTexture) {
        //Log.d(TAG, "frame available");
        mHandler.sendEmptyMessage(MainHandler.MSG_FRAME_AVAILABLE);
    }

    /**
     * Draws a frame onto the SurfaceView and the encoder surface.
     * <p>
     * This will be called whenever we get a new preview frame from the camera.  This runs
     * on the UI thread, which ordinarily isn't a great idea -- you really want heavy work
     * to be on a different thread -- but we're really just throwing a few things at the GPU.
     * The upside is that we don't have to worry about managing state changes between threads.
     * <p>
     * If there was a pending frame available notification when we shut down, we might get
     * here after onPause().
     */
    private void drawFrame() {
        //Log.d(TAG, "drawFrame");
        if (mEglCore == null) {
            Log.d(TAG, "Skipping drawFrame after shutdown");
            return;
        }

        // Latch the next frame from the camera.
        mDisplaySurface.makeCurrent();
        mCameraTexture.updateTexImage();
        mCameraTexture.getTransformMatrix(mTexMatrix);

        GLES20.glViewport(0, 0, displaySurfaceView.getWidth(), displaySurfaceView.getHeight());

        mLutProgram.clearScreen();
        mVideoSprite.draw(mLutProgram, mDisplayProjectionMatrix, mTexMatrix, lutTextureId);

        mDisplaySurface.swapBuffers();
    }

    /**
     * Custom message handler for main UI thread.
     * <p>
     * Used to handle camera preview "frame available" notifications
     */
    private static class MainHandler extends Handler {
        private static final int MSG_FRAME_AVAILABLE = 1;

        private WeakReference<TextOnPreviewActivity> mWeakActivity;

        private MainHandler(TextOnPreviewActivity activity) {
            mWeakActivity = new WeakReference<TextOnPreviewActivity>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            TextOnPreviewActivity activity = mWeakActivity.get();
            if (activity == null) {
                Log.d(TAG, "Got message for dead activity");
                return;
            }

            switch (msg.what) {
                case MSG_FRAME_AVAILABLE: {
                    activity.drawFrame();
                    break;
                }
                default:
                    throw new RuntimeException("Unknown message " + msg.what);
            }
        }
    }
}
